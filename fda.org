#+STARTUP: content showstars indent
#+TITLE: Finance data aggregator
#+LANGUAGE: en
#+OPTIONS: toc:2
#+EXPORT_FILE_NAME: fda.html
#+OPTIONS: toc:2
#+PROPERTY: header-args :mkdirp yes :tangle yes :noweb yes

* Introduction
This script is a Financial data aggregator.

** Setup
Run the following command to import libraries

#+begin_src sh :tangle no
pip install -r requirements.txt
#+end_src

** Usage
To run this script, execute the following command:

#+begin_src sh :tangle no
  ./main.py
#+end_src

** Dependencies

* Execution
** Imports
#+begin_src jupyter-python :session fda :async yes :results silent
  #!/usr/bin/env python
  import pandas as pd
  import pandas_datareader.data as web
  from pandas import Series, DataFrame
  import datetime
  from datetime import date, timedelta
  import matplotlib as mpl
  from matplotlib import pyplot as plt
  import string
  import random
#+end_src

** Optional user input
#+begin_src jupyter-python :session fda :async yes
# Get stock from user
# stock = input("Please enter your stock: ")
#+end_src

** Iterate predefined through stock list
#+begin_src jupyter-python :session fda :async yes :results silent
ticker_list = ["AMZN", "AAPL", "MSFT"]
x = len(ticker_list)
x = x-1
#+end_src

** Main loop
#+begin_src jupyter-python :session fda :async yes
  for ticker in ticker_list:
      # Specify date range
      start = datetime.datetime(2020, 2, 2)
      end = datetime.datetime(2021, 2, 2)

      # Grab stock info from yahoo, start to end
      df = web.DataReader(ticker_list[x], 'yahoo', start, end)

      # Find 30 day moving average for price
      df['Price_Moving_Avg'] = df['Adj Close'].rolling(window=30).mean()
      # Find moving average volume for the last 30 days
      df['Vol_Moving_Avg'] = df['Volume'].rolling(window=30).mean()

      # print(ticker_list[x], df)
      df = df[df['Price_Moving_Avg'].notna()]
      # print(ticker_list[x], df)
      # plt the moving average
      close_price = df["Adj Close"]
      mavgplot = df["Price_Moving_Avg"]
      vmagplot = df["Vol_Moving_Avg"]

      # Adjusting the size of matplotlib
      mpl.rc('figure', figsize=(15, 10))

      # Adjusting the size of matplotlib
      # mpl.style.use('ggplot')

      close_price.plot(label=ticker_list[x], legend=True)
      mavgplot.plot(label='mavg=30d', legend=True)
      vmagplot.plot(secondary_y=True, label='Volume Avg 30d', legend=True)

      # Saving
      ran = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 4))
      filename=str(ticker_list[x]) + '-' + str(ran) + '.png'
      subdirfn=str('output/' + filename)
      print(subdirfn)
      plt.savefig(subdirfn)

      x = x-1
#+end_src

#+RESULTS:
:RESULTS:
: output/MSFT-ASGJ.png
: output/AAPL-8MF3.png
: output/AMZN-T1EU.png
[[file:./.ob-jupyter/73edfa74aec6f51051f5f188fde9ed121ea194eb.png]]
:END:
